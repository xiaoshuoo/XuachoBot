import os
import logging
import json
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    FSInputFile, 
    Message, 
    ContentType,
    LinkPreviewOptions  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.utils.chat_action import ChatActionMiddleware, ChatActionSender
from aiogram.exceptions import (
    TelegramNetworkError, 
    TelegramBadRequest,
    TelegramAPIError
)
from aiogram.utils.formatting import (
    Text,
    Bold,
    Code,
    Pre,
    Italic,
    TextLink,
    Underline
)
import google.generativeai as genai
from aiogram.methods import TelegramMethod
from aiogram.types import FSInputFile, InputFile
from collections import defaultdict
from datetime import datetime, timedelta
import asyncio
from typing import Dict, List, Tuple, Optional, Any
from dotenv import load_dotenv
import aiohttp
import io
import PIL
from PIL import Image
import docx
import PyPDF2
import csv
import openpyxl
import chardet
import tempfile
from PIL import Image, ExifTags
from PIL.ExifTags import TAGS
import os.path
from pathlib import Path
import shutil
from io import BytesIO
import base64
import time
import gc
from aiogram.client.default import DefaultBotProperties

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–æ–±–∞–≤–∏–º:
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "default_admin_password")  # –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –∏–∑ .env
ADMIN_IDS = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
DISABLED_SAFETY_USERS = set()
MAX_IMAGES_PER_REQUEST = 5
MAX_IMAGES_PER_REQUEST_ADMIN = 10
IMAGE_MEMORY_LIMIT = 20
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_modes = {}  # user_id: {"mode": "formal"|"casual", "name": str}

# –û–±–Ω–æ–≤–∏–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ª–∏–º–∏—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π, –¥–æ–±–∞–≤–∏–≤ –æ–±—Ä–∞—Ç–Ω–æ —Å—Ç–∞—Ä—ã–µ –º–æ–¥–µ–ª–∏
MODEL_LIMITS = {
    "gemini-pro": {
        "free": {"rpm": 2, "tpm": 32_000, "rpd": 50},
        "paid": {"rpm": 1000, "tpm": 4_000_000, "rpd": None}
    },
    "gemini-1.5-pro-vision": {
        "free": {"rpm": 2, "tpm": 32_000, "rpd": 50},
        "paid": {"rpm": 1000, "tpm": 4_000_000, "rpd": None}
    },
    "gemini-1.5-flash": {
        "free": {"rpm": 15, "tpm": 1_000_000, "rpd": 1500},
        "paid": {"rpm": 2000, "tpm": 4_000_000, "rpd": None}
    },
    "gemini-1.5-flash-8b": {
        "free": {"rpm": 15, "tpm": 1_000_000, "rpd": 1500},
        "paid": {"rpm": 4000, "tpm": 4_000_000, "rpd": None}
    },
    "gemini-2.0-flash-exp": {
        "free": {"rpm": 5, "tpm": 50_000, "rpd": 100},
        "paid": {"rpm": 2000, "tpm": 8_000_000, "rpd": None}
    },
    "gemini-exp-1206": {
        "free": {"rpm": 3, "tpm": 40_000, "rpd": 75},
        "paid": {"rpm": 1500, "tpm": 6_000_000, "rpd": None}
    },
    "gemini-exp-1121": {
        "free": {"rpm": 3, "tpm": 40_000, "rpd": 75},
        "paid": {"rpm": 1500, "tpm": 6_000_000, "rpd": None}
    },
    "learnlm-1.5-pro-experimental": {
        "free": {"rpm": 4, "tpm": 45_000, "rpd": 80},
        "paid": {"rpm": 1800, "tpm": 7_000_000, "rpd": None}
    },
    "gemini-1.5-pro-exp-0801": {
        "free": {"rpm": 0, "tpm": 0, "rpd": 0},  # –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        "paid": {"rpm": 1000, "tpm": 4_000_000, "rpd": None}  # –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    },
    "gemini-1.5-flash-8b-exp-0827": {
        "free": {"rpm": 0, "tpm": 0, "rpd": 0},  # –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        "paid": {"rpm": 2000, "tpm": 4_000_000, "rpd": None}  # –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    }
}

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö
MODELS_INFO = {
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
    "page1": {
    "gemini-1.5-pro": {
            "name": "Gemini Pro",
            "emoji": "üöÄ",
            "desc": "–°–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å",
            "speed": "–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å"
        },
        "gemini-1.5-pro-vision": {
            "name": "Gemini Pro Vision",
            "emoji": "üëÅ",
            "desc": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏",
            "speed": "–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å"
        },
        "gemini-1.5-flash": {
            "name": "Gemini Flash",
            "emoji": "‚ö°",
            "desc": "–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å (—Å—Ä–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏)",
            "speed": "–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å"
        },
        "gemini-1.5-flash-8b": {
            "name": "Gemini Flash 8B",
            "emoji": "üí®",
            "desc": "–õ—ë–≥–∫–∞—è –º–æ–¥–µ–ª—å (–ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏)",
            "speed": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å"
        }
    },
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 - –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
    "page2": {
        "gemini-2.0-flash-exp": {
            "name": "Gemini 2.0 Flash",
            "emoji": "üöÄ",
            "desc": "–ù–æ–≤–µ–π—à–∞—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å",
            "speed": "–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å",
            "features": "–ê—É–¥–∏–æ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–∏–¥–µ–æ"
        },
        "gemini-exp-1206": {
            "name": "Gemini 1206",
            "emoji": "üéØ",
            "desc": "–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ç–æ—á–Ω–æ—Å—Ç—å",
            "speed": "–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å",
            "features": "–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
        },
        "gemini-exp-1121": {
            "name": "Gemini 1121",
            "emoji": "üíª",
            "desc": "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –∫–æ–¥–µ",
            "speed": "–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å",
            "features": "–ö–æ–¥ –∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è"
        },
        "learnlm-1.5-pro-experimental": {
            "name": "LearnLM 1.5 Pro",
            "emoji": "üß†",
            "desc": "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è",
            "speed": "–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å",
            "features": "–ê—É–¥–∏–æ, –≤–∏–¥–µ–æ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        },
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
        "gemini-1.5-pro-exp-0801": {
            "name": "–ë–ª–∏–∑–Ω–µ—Ü—ã 1.5 –ü—Ä–æ 0801",
            "emoji": "üß™",
            "desc": "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è Pro –≤–µ—Ä—Å–∏—è",
            "speed": "–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å",
            "features": "–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å"
        },
        "gemini-1.5-flash-8b-exp-0827": {
            "name": "–ë–ª–∏–∑–Ω–µ—Ü—ã 1.5 –§–ª—ç—à-8–ë 0827",
            "emoji": "üí®",
            "desc": "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è Flash –≤–µ—Ä—Å–∏—è",
            "speed": "–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å",
            "features": "–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å"
        }
    }
}

# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
SUPPORTED_LANGUAGES = {
    "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
    "en": "üá¨üáß English",
    "es": "üá™üá∏ Espa√±ol",
    "de": "üá©üá™ Deutsch",
    "fr": "üá´üá∑ Fran√ßais",
    "it": "üáÆüáπ Italiano",
    "zh": "üá®üá≥ ‰∏≠Êñá",
    "ja": "üáØüáµ Êó•Êú¨Ë™û",
    "ko": "üá∞üá∑ ÌïúÍµ≠Ïñ¥"
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–ºÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise ValueError("Telegram token not found in environment variables")

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    raise ValueError("Gemini API key not found in environment variables")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(
        parse_mode=ParseMode.MARKDOWN_V2
    )
)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä
router = Router(name="main_router")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_PATH = 'bot_database.db'

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        c.execute('''CREATE TABLE IF NOT EXISTS users
                     (user_id INTEGER PRIMARY KEY,
                      username TEXT,
                      first_name TEXT,
                      last_activity TIMESTAMP)''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        c.execute('''CREATE TABLE IF NOT EXISTS messages
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER,
                      role TEXT,
                      content TEXT,
                      timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                      FOREIGN KEY (user_id) REFERENCES users(user_id))''')
        
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        raise

def save_message(user_id: int, role: str, content: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î"""
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        user_id = int(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c.execute('SELECT 1 FROM users WHERE user_id = ?', (user_id,))
        if not c.fetchone():
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            c.execute('''INSERT INTO users (user_id, last_activity)
                        VALUES (?, ?)''', (user_id, datetime.now().isoformat()))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        timestamp = datetime.now().isoformat()
        c.execute('''INSERT INTO messages (user_id, role, content, timestamp)
                     VALUES (?, ?, ?, ?)''',
                  (user_id, role, content, timestamp))

        conn.commit()
        conn.close()
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: user_id={user_id}, role={role}, timestamp={timestamp}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def get_user_history(user_id: int, limit: int = 10) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        c.execute('''
            SELECT role, content, timestamp 
            FROM messages 
            WHERE user_id = ? 
            ORDER BY timestamp DESC 
            LIMIT ?
        ''', (user_id, limit))
        
        messages = c.fetchall()
        conn.close()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        return list(reversed(messages))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []

def update_user_activity(user_id: int, username: str = None, first_name: str = None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''INSERT OR REPLACE INTO users
                 (user_id, username, first_name, last_activity)
                 VALUES (?, ?, ?, ?)''',
              (user_id, username, first_name, datetime.now()))
    conn.commit()
    conn.close()

# –ù–∞—Å Gemini
genai.configure(api_key=GEMINI_API_KEY)

# –û–±–Ω–æ–≤–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Gemini —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
GEMINI_CONFIGS = {
    "gemini-pro": {
        "temperature": 0.7,
        "top_p": 0.9,
        "top_k": 40,
        "max_output_tokens": 8192,
    },
    "gemini-1.5-pro-vision": {
        "temperature": 0.7,
        "top_p": 0.9,
        "top_k": 40,
        "max_output_tokens": 8192,
    },
    "gemini-1.5-flash": {
        "temperature": 0.9,
        "top_p": 0.95,
        "top_k": 40,
        "max_output_tokens": 8192,
    },
    "gemini-1.5-flash-8b": {
        "temperature": 0.9,
        "top_p": 0.95,
        "top_k": 40,
        "max_output_tokens": 8192,
    },
    "gemini-2.0-flash-exp": {
        "temperature": 0.9,
        "top_p": 0.95,
        "top_k": 40,
        "max_output_tokens": 8192,
    },
    "gemini-exp-1206": {
        "temperature": 0.85,
        "top_p": 0.92,
        "top_k": 40,
        "max_output_tokens": 8192,
    },
    "gemini-exp-1121": {
        "temperature": 0.85,
        "top_p": 0.92,
        "top_k": 40,
        "max_output_tokens": 8192,
    },
    "learnlm-1.5-pro-experimental": {
        "temperature": 0.8,
        "top_p": 0.9,
        "top_k": 40,
        "max_output_tokens": 8192,
    },
    "gemini-1.5-pro-exp-0801": {
        "temperature": 0.7,
        "top_p": 0.9,
        "top_k": 40,
        "max_output_tokens": 8192,
    },
    "gemini-1.5-flash-8b-exp-0827": {
    "temperature": 0.9,
    "top_p": 0.95,
    "top_k": 40,
    "max_output_tokens": 8192,
    }
}

# –£–ª—É—á—à–∏–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
def create_model(model_name: str) -> genai.GenerativeModel:
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –º–æ–¥–µ–ª–∏
        config = GEMINI_CONFIGS.get(model_name, {
            "temperature": 0.7,
            "top_p": 0.9,
            "top_k": 40,
            "max_output_tokens": 8192,
        })

        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        model = genai.GenerativeModel(
            model_name=model_name,
            generation_config=config
        )
        
        return model

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model_name}: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return genai.GenerativeModel('gemini-pro')  # ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ–º–µ–ΩÔøΩÔøΩ–µÔøΩÔøΩ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –î–æ–±–≤–∏–º –Ω–æ–≤ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ–µ ÔøΩÔøΩÔøΩÔøΩÔøΩ–æÔøΩÔøΩ—Å—Ç–∞–Ω—Ç—ã
SUPPORTED_LANGUAGES = {
    "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
    "en": "üá¨üáß English",
    "es": "üá™üá∏ Espa√±ol",
    "de": "üá©üá™ Deutsch",
    "fr": "üá´üá∑ Fran√ßais",
    "it": "üáÆüáπ Italiano",
    "zh": "üá®üá≥ ‰∏≠Êñá",
    "ja": "üáØüáµ Êó•Êú¨Ë™û",
    "ko": "üá∞üá∑ ÌïúÍµ≠Ïñ¥"
}

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
SUPPORTED_FILE_TYPES = {
    'image': ['.jpg', '.jpeg', '.png', '.webp', '.heic'],
    'document': ['.pdf', '.doc', '.docx', '.txt', '.rtf'],
    'spreadsheet': ['.xlsx', '.xls', '.csv'],
    'presentation': ['.ppt', '.pptx'],
    'code': ['.py', '.js', '.html', '.css', '.json', '.xml', '.yaml', '.sql'],
    'archive': ['.zip', '.rar', '.7z', '.tar', '.gz']
}

MAX_FILE_SIZE = 20 * 1024 * 1024  # 20MB
MAX_IMAGE_SIZE = 10 * 1024 * 1024  # 10MB
MAX_IMAGES_PER_GROUP = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
MEDIA_GROUP_TIMEOUT = 60  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –£–ª—É—á—à–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–æ—Ç–∏ —Ñ–∞–ª–≤
async def process_image(image_path: str) -> tuple[PIL.Image.Image, str]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–æ–±—Ä–∂–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    try:
        image = Image.open(image_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—É–µ–º HEIC –≤ JPEG –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if image_path.lower().endswith('.heic'):
            new_path = image_path.rsplit('.', 1)[0] + '.jpg'
            image = image.convert('RGB')
            image.save(new_path, 'JPEG')
            image_path = new_path

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if os.path.getsize(image_path) > MAX_IMAGE_SIZE:
            while os.path.getsize(image_path) > MAX_IMAGE_SIZE:
                width, height = image.size
                image = image.resize((int(width*0.8), int(height*0.8)), Image.Resampling.LANCZOS)
                image.save(image_path, optimize=True, quality=85)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º EXIF –¥–∞–Ω–Ω—ã–µ
        exif_data = ""
        try:
            exif = image._getexif()
            if exif:
                exif_info = []
                for tag_id in exif:
                    tag = TAGS.get(tag_id, tag_id)
                    data = exif.get(tag_id)
                    if isinstance(data, bytes):
                        data = data.decode(errors='ignore')
                    exif_info.append("{}: {}".format(tag, data))
                exif_data = "\nEXIF –¥–∞–Ω–Ω—ã–µ:\n" + "\n".join(exif_info)
        except:
            pass

        return image, exif_data

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}".format(e))
        raise

# –û–±–Ω–æ–≤–∏–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
MAX_MESSAGE_LENGTH = 2000  # –ï—â–µ —É–º–µ–Ω—å—à–∏–º –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
MIN_CHUNK_SIZE = 200  # –£–º–µ–Ω—å—à–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏
MAX_PARTS = 8  # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
MAX_FILE_TEXT_LENGTH = 15000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞

async def extract_text_from_file(file_path: str, mime_type: str) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"""
    try:
        text_content = []
        total_length = 0
        
        if mime_type == 'application/pdf':
            with open(file_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                max_pages = min(len(pdf_reader.pages), 10)
                
                for i in range(max_pages):
                    page_text = pdf_reader.pages[i].extract_text()
                    if total_length + len(page_text) > MAX_FILE_TEXT_LENGTH:
                        text_content.append(f"\n... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ {len(pdf_reader.pages) - i} —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–æ–ø—É—â–µ–Ω—ã)")
                        break
                    text_content.append(f"[–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}]\n{page_text}")
                    total_length += len(page_text)
                    
        elif mime_type in ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document']:
            doc = docx.Document(file_path)
            
            for i, para in enumerate(doc.paragraphs):
                if total_length > MAX_FILE_TEXT_LENGTH:
                    text_content.append("\n... (–æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω)")
                    break
                if para.text.strip():
                    text_content.append(para.text)
                    total_length += len(para.text)
                    
        elif mime_type == 'text/plain':
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
                lines = []
                for line in file:
                    if total_length > MAX_FILE_TEXT_LENGTH:
                        lines.append("\n... (–æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω)")
                        break
                    lines.append(line.strip())
                    total_length += len(line)
                text_content = lines
                
        elif mime_type in ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']:
            wb = openpyxl.load_workbook(file_path)
            
            for sheet_name in wb.sheetnames[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤
                ws = wb[sheet_name]
                sheet_content = [f"\n[–õ–∏—Å—Ç: {sheet_name}]"]
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —á—Ç–µ–Ω–∏—è
                max_rows = min(ws.max_row, 50)
                max_cols = min(ws.max_column, 10)
                
                for row in ws.iter_rows(max_row=max_rows, max_col=max_cols):
                    row_text = " | ".join(str(cell.value or "") for cell in row)
                    if total_length > MAX_FILE_TEXT_LENGTH:
                        sheet_content.append("... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—â–µ–Ω—ã)")
                        break
                    sheet_content.append(row_text)
                    total_length += len(row_text)
                    
                text_content.extend(sheet_content)
                
        elif mime_type == 'text/csv':
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
                csv_reader = csv.reader(file)
                rows = []
                for i, row in enumerate(csv_reader):
                    if i > 50 or total_length > MAX_FILE_TEXT_LENGTH:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
                        rows.append("... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã)")
                        break
                    row_text = " | ".join(row)
                    rows.append(row_text)
                    total_length += len(row_text)
                text_content = rows

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = "\n".join(text_content)
        if len(result) > MAX_FILE_TEXT_LENGTH:
            result = result[:MAX_FILE_TEXT_LENGTH] + "\n... (—Ç–µ–∫—ÅÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)"
            
        return result.strip()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞: {str(e)}"

# –£–ª—É—á—à–∏–º –∫–ª–∞—Å—Å ChatSession
class ChatSession:
    def __init__(self, model_name: str = "gemini-1.5-flash", user_id: Optional[int] = None):
        self.model_name = model_name
        self.user_id = user_id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
        self.history = []
        self.long_term_memory = []
        self.message_metadata = {}  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–æ
        self.message_counter = 0
        self.last_activity = datetime.now()
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.generation_config = {
            "temperature": 1.0,
            "top_p": 1.0,
            "top_k": 40,
            "max_output_tokens": 8192,
            "candidate_count": 1,
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.safety_settings = [
            {
                "category": category,
                "threshold": "BLOCK_NONE"
            }
            for category in [
                "HARM_CATEGORY_HARASSMENT",
                "HARM_CATEGORY_HATE_SPEECH",
                "HARM_CATEGORY_SEXUALLY_EXPLICIT", 
                "HARM_CATEGORY_DANGEROUS_CONTENT"
            ]
        ]
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        self.model = genai.GenerativeModel(
            model_name=model_name,
            generation_config=self.generation_config,
            safety_settings=self.safety_settings
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç
        self.chat = self.model.start_chat(history=[])
        self.context_window = CHAT_SETTINGS["context_window"]
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        self.db_connection = sqlite3.connect(DB_PATH)
        self.load_history_from_db()

    def load_history_from_db(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –ë–î"""
        try:
            cursor = self.db_connection.cursor()
            cursor.execute('''
                SELECT role, content, timestamp 
                FROM messages 
                WHERE user_id = ? 
                ORDER BY timestamp ASC
            ''', (self.user_id,))
            
            for role, content, timestamp in cursor.fetchall():
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ–ª—å –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Gemini
                gemini_role = "user" if role == "user" else "model"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = {
                    "role": gemini_role,
                    "parts": [{"text": content}]
                }
                self.long_term_memory.append(message)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                self.message_metadata[self.message_counter] = {
                    "timestamp": timestamp,
                    "role": role,
                    "display_role": "üë§ –í—ã" if role == "user" else "ü§ñ –ë–æ—Ç"
                }
                self.message_counter += 1
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            self.history = self.long_term_memory[-CHAT_SETTINGS["context_window"]:]
            
        except Exception as e:
            logger.error(f"Error loading history: {e}")
            self.history = []
            self.long_term_memory = []
            self.message_metadata = {}
            self.message_counter = 0

    async def send_message(self, text: str, stream: bool = False) -> str:
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message = {
                "role": "user", 
                "parts": [{"text": text}]
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            messages = []
            for msg in self.history:
                messages.append({
                    "role": msg["role"],
                    "parts": msg["parts"]
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages.append(user_message)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
            self.chat = self.model.start_chat(history=messages)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if stream:
                response_text = await self.stream_response(text)
            else:
                response = await asyncio.to_thread(
                    self.chat.send_message,
                    text
                )
                response_text = response.text
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.history.append(user_message)
            self.long_term_memory.append(user_message)
            self.message_metadata[self.message_counter] = {
                "timestamp": datetime.now().isoformat(),
                "role": "user",
                "display_role": "üë§ –í—ã"
            }
            self.message_counter += 1
            self.save_to_db("user", text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
            model_message = {
                "role": "model",
                "parts": [{"text": response_text}]
            }
            self.history.append(model_message)
            self.long_term_memory.append(model_message)
            self.message_metadata[self.message_counter] = {
                "timestamp": datetime.now().isoformat(),
                "role": "model", 
                "display_role": "ü§ñ –ë–æ—Ç"
            }
            self.message_counter += 1
            self.save_to_db("model", response_text)
            
            return response_text
            
        except Exception as e:
            logger.error(f"Error in send_message: {e}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

    def find_relevant_messages(self, query: str) -> List[dict]:
        """–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏"""
        relevant = []
        query_words = set(query.lower().split())
        
        for msg in self.long_term_memory:
            msg_text = msg["parts"][0]["text"].lower()
            msg_words = set(msg_text.split())
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
            common_words = query_words.intersection(msg_words)
            relevance = len(common_words) / len(query_words) if query_words else 0
            
            if relevance >= CHAT_SETTINGS["memory_threshold"]:
                relevant.append(msg)
                
        return relevant[:CHAT_SETTINGS["max_memory_items"]]

    def save_to_db(self, role: str, content: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ–ª—å assistant –≤ model –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            db_role = "user" if role == "user" else "model"
            
            cursor = self.db_connection.cursor()
            cursor.execute('''
                INSERT INTO messages (user_id, role, content, timestamp)
                VALUES (?, ?, ?, ?)
            ''', (self.user_id, db_role, content, datetime.now().isoformat()))
            self.db_connection.commit()
        except Exception as e:
            logger.error(f"Error saving to DB: {e}")

    async def search_history(self, query: str) -> List[dict]:
        """–ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
        relevant = self.find_relevant_messages(query)
        results = []
        
        for i, msg in enumerate(relevant):
            metadata = self.message_metadata.get(i, {})
            results.append({
                "text": msg["parts"][0]["text"],
                "role": msg["role"],
                "timestamp": metadata.get("timestamp", ""),
                "relevance": self.calculate_relevance(query, msg["parts"][0]["text"])
            })
            
        return results

    def calculate_relevance(self, query: str, text: str) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å—É"""
        query_words = set(query.lower().split())
        text_words = set(text.lower().split())
        common_words = query_words.intersection(text_words)
        return len(common_words) / len(query_words) if query_words else 0

    def __del__(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞"""
        if hasattr(self, 'db_connection'):
            self.db_connection.close()

    def get_chat_history(self) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        formatted_history = []
        for msg in self.history:
            role = "üë§ –í—ã" if msg["role"] == "user" else "ü§ñ –ë–æ—Ç"
            text = msg["parts"][0]["text"]
            formatted_history.append(f"{role}: {text}")
        return formatted_history

    def clear_history(self) -> None:
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Å–±—Ä–æ—Å —á–∞—Ç–∞"""
        self.history = []
        self.chat = self.model.start_chat()
        self.last_activity = datetime.now()

    def get_context_summary(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if not self.history:
            return "üí¨ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞"
            
        last_messages = self.history[-self.context_window:]
        summary = ["üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:*\n"]
        
        for msg in last_messages:
            role = "üë§" if msg["role"] == "user" else "ü§ñ"
            text = msg["parts"][0]["text"]
            if len(text) > 100:
                text = text[:100] + "..."
            summary.append(f"{role} {text}")
            
        return "\n".join(summary)

    def _format_response(self, text: str) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –º–æ–¥–µ–ª–∏ —Å–∞–º–æ–π –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        # –ü—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
        return text.strip()

    def _get_enhanced_context(self, current_text: str) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏"""
        if not self.history:
            return ""
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        recent_messages = self.history[-CHAT_SETTINGS["context_window"]:]
        
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏
        relevant_messages = []
        for msg in recent_messages:
            if self._is_relevant(msg['parts'][0]["text"], current_text):
                relevant_messages.append(msg)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_parts = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if relevant_messages:
            context_parts.append("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞—Å—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:")
            for msg in relevant_messages[-3:]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µÔøΩÔøΩ–∏—è
                context_parts.append(msg['parts'][0]["text"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        context_parts.append("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        for msg in recent_messages:
            context_parts.append(msg['parts'][0]["text"])
            
        return "\n".join(context_parts)

    def _is_relevant(self, history_text: str, current_text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—ÄÔøΩÔøΩ–∞ ÔøΩÔøΩ–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö —Å–ª–æ–≤
        history_words = set(history_text.lower().split())
        current_words = set(current_text.lower().split())
        common_words = history_words.intersection(current_words)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æÔøΩÔøΩÔøΩÔøΩ—Ç–∞—Ç–æ—á–Ω–æ –æ–±—â–∏—Ö —Å–ª–æ–≤, —Å—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º
        return len(common_words) >= 2

    def update_conversation_style(self, style: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è"""
        self.conversation_style = style
        if style == "casual":
            self.conversation_state["formality_level"] = 0.2
        else:
            self.conversation_state["formality_level"] = 0.8
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á–∞—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        self.model = genai.GenerativeModel(self.model_name)  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç

    async def _analyze_topic(self, text: str) -> str:
        """–ê–Ω–∞–ªÔøΩÔøΩÔøΩÔøΩ–∏ÔøΩÔøΩ–µ—Ç —Ç–µ–º—É —ÅÔøΩÔøΩ–æ–±—âÔøΩÔøΩÔøΩÔøΩÔøΩ–Ω–∏—è"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            topics = {
                "technical": ["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–æ—à–∏–±–∫–∞", "–±–∞–≥", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"],
                "general": ["–ø—Ä–∏–≤–µ—Ç", "–∞–∫ –¥–µÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ–∞", "–ø–æ–≥–æ–¥–∞", "–Ω–≤–æ—Ç"],
                "help": ["–ø–æ–º–æ—â—å", "–ø–æ–º–æ–≥–∏", "–ø–æÔøΩÔøΩ—Å–∫–∞–∂–∏", "–∫–∞–∫"],
                "business": ["–±–∏–∑–Ω–µ—Å", "—Ä–∞–±–æ—Ç–∞", "–ø—Ä–æ–µ–∫—Ç", "–¥–µ–Ω—å–≥–∏"],
            }
            
            text_lower = text.lower()
            for topic, keywords in topics.items():
                if any(keyword in text_lower for keyword in keywords):
                    return topic
            return "general"
        except Exception as e:
            logger.error(f"Error in topic analysis: {e}")
            return "unknown"

    async def _analyze_sentiment(self, text: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç ÔøΩÔøΩ–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ—Å—Ç–π –∞–Ω–∞–ª–∏–∑ –ø –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            positive_words = ["—Å–ø–∞—Å–∏–±–æ", "–∫—Ä—É—Ç–æ", "–æ—Ç–ª–∏—á–Ω–æ", "–∑–¥–æ—ÄÔøΩÔøΩ–≤–æ", "–∫–ª–∞—Å—Å", "—Ö–æ—Ä–æ—à–æ"]
            negative_words = ["–ø–ª–æ—Ö–æ", "—É–∂–∞—Å–Ω–æ", "–æ–∏–±–∫–∞", "–ø—Ä–æ–±–ª–µ–º–∞", "ÔøΩÔøΩÔøΩ–µ —Ä–æ—Ç–∞–µ—Ç"]
            
            text_lower = text.lower()
            
            if any(word in text_lower for word in positive_words):
                return "positive"
            elif any(word in text_lower for word in negative_words):
                return "negative"
            return "neutral"

        except Exception as e:
            logger.error(f"Error in sentiment analysis: {e}")
            return "neutral"

    async def _analyze_message(self, text: str):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–∏—è"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—É
            topic = await self._analyze_topic(text)
            if topic != "general":
                self.conversation_state["current_topic"] = topic
                self.topics.append(topic)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
            sentiment = await self._analyze_sentiment(text)
            self.sentiment = sentiment
            self.conversation_state["emotional_state"] = sentiment

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏
            key_points = set(word.lower() for word in text.split() if len(word) > 3)
            self.conversation_state["key_points"].update(key_points)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
            questions = [s.strip() for s in text.split('.') if '?' in s]
            self.conversation_state["questions_asked"].extend(questions)

            # –û–ø—Ä–µ–¥–µ—è–µ–º —è–∑—ã–∫
            detected_lang = self.detect_language(text)
            if detected_lang:
                self.preferred_language = detected_lang

            # –û–±–Ω–≤–ªÔøΩÔøΩ–µ–º –≥–ª—É–±–∏–Ω—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            self.conversation_state["conversation_depth"] += 1

            return {
                "topic": topic,
                "sentiment": sentiment,
                "key_points": key_points,
                "questions": questions,
                "language": self.preferred_language
            }

        except Exception as e:
            logger.error(f"Error in message analysis: {e}")
            return None

    def update_user_preferences(self, preferences: dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª"""
        self.user_preferences.update(preferences)

    def get_conversation_summary(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ç–µ–∫—É—â–µ–π –±–µ—Å–µ–¥—ã"""
        return {
            "total_messages": len(self.history),
            "main_topics": self.topics[-5:] if self.topics else [],
            "sentiment": self.sentiment,
            "language": self.preferred_language,
            "user_preferences": self.user_preferences,
            "conversation_depth": self.conversation_state["conversation_depth"],
            "key_points": list(self.conversation_state["key_points"])[:5],
            "recent_questions": self.conversation_state["questions_asked"][-3:],
            "emotional_state": self.conversation_state["emotional_state"],
            "formality_level": self.conversation_state["formality_level"]
        }

    def detect_language(self, text: str) -> str:
        """–û–ø–µ–¥–µ–ª–µ–Ω–∏–µ —ã–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü—Ä–æ—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
        text = text.lower()
        if any(char in '–∞–±–≤–≥–¥–µ—ë–∂–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for char in text):
            return "ru"
        elif all(ord(char) < 128 for char in text):
            return "en"
        return None

    def get_session_info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏"""
        return {
            "model": self.model_name,
            "language": self.preferred_language,
            "messages_count": len(self.history),
            "last_activity": self.last_activity,
            "has_image": self.last_image is not None
        }

    async def enhance_image(self, image: Image.Image) -> Image.Image:
        """–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ë–∞–∑–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
            enhanced = image.copy()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            if image.size[0] * image.size[1] > 1920 * 1080:
                enhanced.thumbnail((1920, 1080), Image.Resampling.LANCZOS)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è
            from PIL import ImageEnhance
            enhancer = ImageEnhance.Contrast(enhanced)
            enhanced = enhancer.enhance(1.2)
            enhancer = ImageEnhance.Sharpness(enhanced)
            enhanced = enhancer.enhance(1.1)
            
            return enhanced
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return image

    async def translate_text(self, text: str, target_language: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –¥—Ä—É–≥–æ–π —è–∑—ã–∫"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –ø–µ—Ä–µ–≤–æ–¥–∞
            response = await self.model.generate_content([f"Translate this to {target_language}: {text}"])
            return response.text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞: {e}")
            return text

    def toggle_system_prompt(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        self.use_system_prompt = not self.use_system_prompt
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
        if self.use_system_prompt:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            self.generation_config = {
                "temperature": 1.0,          # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
                "top_p": 1.0,               # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
                "top_k": 40,                # –ë–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                "max_output_tokens": 4096,   # –î–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                "candidate_count": 1,        # –û–¥–∏–Ω –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç
                "stop_sequences": ["User:", "Assistant:"]
            }
            
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            self.system_prompt = (
                "You are a creative and engaging AI assistant. Feel free to:\n"
                "- Use expressive language and varied tone\n"
                "- Include relevant examples and analogies\n"
                "- Break down complex topics into simple explanations\n"
                "- Add helpful context and background information\n"
                "- Use formatting to enhance readability\n"
                "- Be conversational and engaging\n"
            )
        else:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            self.generation_config = {
                "temperature": 0.4,          # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                "top_p": 0.8,               # –ú–µ–Ω—å—à–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
                "top_k": 20,                # –ú–µ–Ω—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                "max_output_tokens": 2048,   # –ö–æ—Ä–æ—á–µ –æ—Ç–≤–µ—Ç—ã
                "candidate_count": 1,        # –û–¥–∏–Ω —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
                "stop_sequences": ["User:", "Assistant:"]
            }
            
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            self.system_prompt = (
                "You are a precise and concise AI assistant. Focus on:\n"
                "- Direct and accurate answers\n"
                "- Clear and factual information\n"
                "- Technical accuracy and details\n"
                "- Structured and organized responses\n"
                "- Professional and formal tone\n"
            )
        
        return self.use_system_prompt

# –ü–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤ –¥–æ–±–∞–≤–∏–º –∫–ª–∞—Å—Å APIUsageTracker
class APIUsageTracker:
    def __init__(self):
        self.requests_per_minute = defaultdict(list)
        self.requests_per_day = defaultdict(list)
        self.current_model = "gemini-pro"  # –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.is_paid = False
        self.user_stats = defaultdict(lambda: {
            "total_requests": 0,
            "total_tokens": 0,
            "favorite_model": None,
            "last_request": None
        })

    # –î–æ–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ can_make_request
    async def can_make_request(self, user_id: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
        # –ï—Å–ª–∏ –ø–æ–ª—å–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        if user_id in ADMIN_IDS:
            return True, ""
        
        self.clean_old_requests(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
        limits = MODEL_LIMITS[self.current_model]["paid" if self.is_paid else "free"]
        rpm_count = len(self.requests_per_minute[user_id])
        rpd_count = len(self.requests_per_day[user_id])

        if rpm_count >= limits["rpm"]:
            wait_time = self._get_wait_time(user_id, "minute")
            message = escape_markdown_v2(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {wait_time} —Å–µ–∫.")
            return False, message

        if limits["rpd"] and rpd_count >= limits["rpd"]:
            wait_time = self._get_wait_time(user_id, "day")
            message = escape_markdown_v2(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç. –ù–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ {wait_time} –º–∏–Ω.")
            return False, message

        return True, ""

    def _get_wait_time(self, user_id: str, period: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–º–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ —Å–ª–µ–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        current_time = datetime.now()
        if period == "minute":
            oldest_request = min(self.requests_per_minute[user_id])
            return 60 - (current_time - oldest_request).seconds
        else:  # day
            oldest_request = min(self.requests_per_day[user_id])
            return (24 * 60) - ((current_time - oldest_request).seconds // 60)

    def track_request(self, user_id: str):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        current_time = datetime.now()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∏–Ω—É—Ç—ã
        self.requests_per_minute[user_id].append(current_time)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è
        self.requests_per_day[user_id].append(current_time)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = self.user_stats[user_id]
        stats["total_requests"] += 1
        stats["last_request"] = current_time
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.clean_old_requests(user_id)

    def clean_old_requests(self, user_id: str):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        current_time = datetime.now()
        minute_ago = current_time - timedelta(minutes=1)
        day_ago = current_time - timedelta(days=1)
        
        # –û–∏—â–∞–µ–º –∑–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ –º–∏–Ω—É—Ç—ã
        self.requests_per_minute[user_id] = [
            t for t in self.requests_per_minute[user_id]
            if t > minute_ago
        ]
        
        # –û—á–∏—â–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—à–µ –¥–Ω—è
        self.requests_per_day[user_id] = [
            t for t in self.requests_per_day[user_id]
            if t > day_ago
        ]

    def get_usage_stats(self, user_id: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∏ –∏—Å–ø–æ—å–∑–æ–≤–∞–Ω–∏—è"""
        self.clean_old_requests(user_id)
        
        stats = self.user_stats[user_id]
        current_limits = MODEL_LIMITS[self.current_model]["paid" if self.is_paid else "free"]
        
        return {
            "total_requests": stats["total_requests"],
            "total_tokens": stats["total_tokens"],
            "requests_today": len(self.requests_per_day[user_id]),
            "requests_minute": len(self.requests_per_minute[user_id]),
            "favorite_model": stats["favorite_model"] or self.current_model,
            "current_model": self.current_model,
            "is_paid": self.is_paid,
            "last_update": datetime.now(),
            "limits": current_limits
        }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
api_tracker = APIUsageTracker()

# –æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–∫—Ç—ã
chat_sessions = {}

def get_chat_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", callback_data="new_chat"))
    builder.add(InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è —á—Ç–∞", callback_data="show_history"))
    builder.add(InlineKeyboardButton(text="–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏", callback_data="export_history"))
    builder.add(InlineKeyboardButton(text="–æ–º–æ—â—å", callback_data="help"))
    return builder.as_markup()

def setup_bot_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        types.BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"),
        types.BotCommand(command="new", description="üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"),
        types.BotCommand(command="history", description="üìú –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞"),
        types.BotCommand(command="export", description="üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª"),
        types.BotCommand(command="model", description="ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ AI"),
        types.BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"),
        types.BotCommand(command="mode", description="‚öôÔ∏è –†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è"),
        types.BotCommand(command="search", description="üîç –ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏"),
        types.BotCommand(command="summary", description="üìù –°–≤–æ–¥–∫–∞ –¥–∏–∞–ª–æ–≥–∞"),
        types.BotCommand(command="clear", description="üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"),
        types.BotCommand(command="settings", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        types.BotCommand(command="context", description="üß† –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"),
        types.BotCommand(command="analyze", description="üî¨ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"),
        types.BotCommand(command="auth", description="üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞"),
    ]
    return commands

# –°–Ω–∞—á–∞–ª–∞ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command("start"), flags={"command": True})
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = str(message.from_user.id)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        chat_sessions[user_id] = ChatSession(api_tracker.current_model)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µÔøΩÔøΩ–µ
        update_user_activity(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )
        
        # –°–æ–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(
                text="üì§ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞",
                callback_data="show_history"
            ),
            InlineKeyboardButton(
                text=" –ü–æ–º–æ—â—å",
                callback_data="help"
            )
        )
        keyboard.row(
            InlineKeyboardButton(
                text="üîÑ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥",
                callback_data="new_chat"
            ),
            InlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data="show_stats"
            )
        )
        
        welcome_text = (
            f"*–î–æ–±ÔøΩÔøΩ–æ –ø–æÔøΩÔøΩ–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!*\n\n"
            "ü§ñ * –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –±–∞–∑–µ Gemini*\n\n"
            "*–ú–æ–∏ –≤–æÔøΩÔøΩ–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏ÔøΩÔøΩ–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤\n"
            "‚Ä¢ –ü–æ–º–æ—â —Å –∫–æ–¥–æ–º\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞ÔøΩÔøΩ–¥ÔøΩÔøΩ:*\n"
            "üîÑ /new - –ù–æ–≤ÔøΩÔøΩ–π –¥–∏–∞–ª–æÔøΩÔøΩÔøΩÔøΩ\n"
            "üîß /model - –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏\n"
            "üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚ùì /help - –ü–æ–º–æ—â—å\n\n"
            "_–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–æ–±—ã –Ω–∞—á–∞—Ç –æ–±—â–Ω–∏–µ_"
        )
        
        await message.reply(
            welcome_text,
            parse_mode="Markdown",
            reply_markup=keyboard.as_markup()
        )
        
        # –û–ø—Ä–∞–≤–ª—è–µ–º –∏—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
        model_info = {
            "gemini-1.5-pro": {"name": "Gemini Pro", "emoji": "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ"},
            "gemini-1.5-flash": {"name": "Gemini Flash", "emoji": "‚ö°"},
            "gemini-1.5-flash-8b": {"name": "Gemini Flash 8B", "emoji": "üí®"}
        }.get(api_tracker.current_model, {"name": api_tracker.current_model, "emoji": "ü§ñ"})
        
        model_text = (
            f"{model_info['emoji']} *–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {model_info['name']}*\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /model –¥–ª—è —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏"
        )
        
        await message.answer(model_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∞ –≤ start_handler: {e}")
        await message.reply(
            "ÔøΩÔøΩÔøΩ –ü—ÄÔøΩÔøΩ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="Markdown"
        )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ auth —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ start
@router.message(Command("auth"))
async def auth_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        parts = message.text.split(maxsplit=1)
        if len(parts) != 2:
            await message.reply(
                "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã*\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /auth <–ø–∞—Ä–æ–ª—å>",
                parse_mode="Markdown"
            )
            return

        password = parts[1].strip()
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        if password == ADMIN_PASSWORD:
            ADMIN_IDS.add(user_id)
            api_tracker.is_paid = True
            
            if user_id in chat_sessions:
                chat_sessions[user_id] = ChatSession(api_tracker.current_model)
            
            await message.reply(
                "üéâ *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*\n\n"
                "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "‚úÖ –õ–∏–º–∏—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã —Å–Ω—è—Ç—ã\n"
                "‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –º–æ–¥–µ–ª–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
                parse_mode="Markdown"
            )
            
            await message.delete()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            
        else:
            await message.reply(
                "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!*\n\n"
                "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.",
                parse_mode="Markdown"
            )
            logger.warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ auth_handler: {e}")
        await message.reply(
            "üòî *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏*",
            parse_mode="Markdown"
        )

@router.message(Command("help"))
async def help_handler(message: types.Message):
    help_text = escape_markdown_v2(
        "ü§ñ –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –±–∞–∑–µ Gemini\n\n"
        "–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\n"
        "üîπ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n"
        "–Ø –æ—Ç–≤–µ—á—É –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ª—é–±—ã–º —Ç–µ–º–∞–º. –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ!\n\n"
        "üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞:\n"
        "–Ø –º–æ–≥—É –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö: —Å—Ç–∞—Ç—å–∏, –∏—Å—Ç–æ—Ä–∏–∏, —Å—Ç–∏—Ö–∏.\n\n"
        "üîπ –ü–µ—Ä–µ–≤–æ–¥:\n"
        "–ü–æ–º–æ–≥—É —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏.\n\n"
        "üîπ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:\n"
        "–ú–æ–≥—É –æ–±–æ–±—â–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã.\n\n"
        "üîπ –ü–æ–º–æ—â—å —Å –∫–æ–¥–æ–º:\n"
        "–ü–æ–º–æ–≥—É —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ—Ç–ª–∞–¥–∫–æ–π.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
        "/new - –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\n"
        "/history - –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞\n"
        "/export - –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏\n"
        "/model - –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–°–æ–≤–µ—Ç: –ß–µ–º —Ç–æ—á–Ω–µ–µ –≤–æ–ø—Ä–æ—Å, —Ç–µ–º –ø–æ–ª–µ–∑–Ω–µ–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç."
    )
    await message.reply(
        text=help_text,
        parse_mode=ParseMode.MARKDOWN_V2
    )

@router.message(Command("model"), flags={"command": True})
async def model_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        keyboard = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤—è–µ–º –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ–ª–µ–π –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for model_id, info in MODELS_INFO["page1"].items():
            keyboard.add(InlineKeyboardButton(
                text=f"{info['emoji']} {info['name']}",
                callback_data=f"model_{model_id}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü
            keyboard.add(InlineKeyboardButton(
            text="‚û°Ô∏è –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏",
            callback_data="model_page_2"
        ))
        
        # –†–∞—ÅÔøΩÔøΩÔøΩÔøΩ–æ–∞–≥–∞–µ–º –∫–æ–ø–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü
        keyboard.adjust(2)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å —Å–æ–æ–±—â–Ω–∏—è
        model_text = (
            "ü§ñ *–í—ãÔøΩÔøΩ–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:*\n\n"
            "*–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏:*\n\n"
        )
        
        for info in MODELS_INFO["page1"].values():
            model_text += (
                f"{info['emoji']} *{info['name']}*\n"
                f"‚îî {info['desc']}\n"
                f"‚îî –°–æ—Ä–æ—Å—Ç—å: {info['speed']}\n\n"
            )

        await message.reply(
            model_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ model_handler: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π")

@router.message(Command("stats"), flags={"command": True})
async def stats_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        user_id = str(message.from_user.id)
        stats = api_tracker.get_usage_stats(user_id)
        
        stats_text = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*\n\n"
            f"ü§ñ –¢–µ–∫—É—â–∞—è –æ–¥–µ–ª: {stats['current_model']}\n"
            f"ÔøΩÔøΩÔøΩ –¢–∏–ø –¥–æ—Å—Ç—É–ø–∞: {'Premium' if stats['is_paid'] else '–ë–∞–∑–æ–≤—ã–π'}\n\n"
            f"üìà *–ó–∞–ø—Ä–æ—Å—ã:*\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_requests']}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['requests_today']}\n"
            f"‚Ä¢ –ó–∞ –º–∏–Ω—É—Ç—É: {stats['requests_minute']}\n\n"
            f"üéØ *–õ–∏–º–∏—Ç—ã:*\n"
            f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É: {stats['limits']['rpm']}\n"
            f"‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ –≤ –º–∏–Ω—É—Ç—É: {stats['limits']['tpm']:,}\n"
            f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å: {stats['limits']['rpd'] or '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}\n\n"
            f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['last_update'].strftime('%H:%M:%S')}"
        )
        
        await message.reply(stats_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stats_handler: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–Ω–∏–∏ —Å—Ç–∞—Ç—Å—Ç–∏–∫–∏")

@router.message(Command("new"))
async def new_chat_handler(message: types.Message):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"""
    try:
        user_id = str(message.from_user.id)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞
        chat_sessions[user_id] = ChatSession(api_tracker.current_model)
        
        await message.reply(
            "üîÑ *–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥!*",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ new_chat_handler: {e}")
        await message.reply(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞*",
            parse_mode="Markdown"
        )

@router.message(F.photo)
async def handle_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        can_request, error_message = await api_tracker.can_make_request(user_id)
        if not can_request:
            await message.reply(error_message)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        photo = message.photo[-1]
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª
        temp_dir = tempfile.mkdtemp()
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            file_info = await bot.get_file(photo.file_id)
            file_path = os.path.join(temp_dir, f"image_{photo.file_id}.jpg")
            await bot.download_file(file_info.file_path, file_path)
            
            # –û–±–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with Image.open(file_path) as img:
                if img.mode != 'RGB':
                    img = img.convert('RGB')
                processed_image = img.copy()

            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Å –º–æ–¥–µ–ª—å—é
            if user_id not in chat_sessions:
                chat_sessions[user_id] = ChatSession("gemini-1.5-pro-vision", user_id)
            session = chat_sessions[user_id]

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = message.caption if message.caption else "–û–ø–∏—à–∏ —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –∏–∑ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            model = create_model(session.model_name)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
            response = model.generate_content([
                prompt,
                processed_image
            ])

            # –ü—Ä–æ–≤–µ—Ä—è–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            if response and hasattr(response, 'text'):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                save_message(user_id, "user", f"[–ò–∑–æ–±–∞–∂–µ–Ω–∏–µ] {prompt}")
                save_message(user_id, "assistant", response.text)
                
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
                api_tracker.track_request(user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                await send_long_message(message, response.text)
            else:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await message.reply(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∫–∞ –ø—Ä–∏ –±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
                "–í–æ–∑–æ–∂–Ω–æ, —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /model –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
            )
            
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if os.path.exists(temp_dir):
                shutil.rmtree(temp_dir)
                
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_photo: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç—ã
def image_to_bytes(image: Image.Image) -> bytes:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç—ã"""
    try:
        with io.BytesIO() as bio:
            image.save(bio, format='JPEG')
            return bio.getvalue()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç—ã: {e}")
        raise

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown"""
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    return ''.join(f'\\{c}' if c in escape_chars else c for c in text)

@router.message(F.media_group_id)
async def handle_media_group(message: Message):
    """–û–±–∞–±–æ—Ç—á–∏–∫ –≥—Ä—É–ø–ø—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        user_id = str(message.from_user.id)
        media_group_id = message.media_group_id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not message.photo:
            return

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        if user_id not in chat_sessions:
            chat_sessions[user_id] = ChatSession("gemini-pro-vision", user_id)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç
        if media_group_id not in media_groups:
            media_groups[media_group_id] = {
                "images": [],
                "user_id": user_id,
                "timestamp": datetime.utcnow(),
                "waiting_prompt": True
            }

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        photo = message.photo[-1]
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = tempfile.mkdtemp()
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
            file_info = await bot.get_file(photo.file_id)
            file_path = os.path.join(temp_dir, f"image_{photo.file_id}.jpg")
            await bot.download_file(file_info.file_path, file_path)
            
            with Image.open(file_path) as img:
                if img.mode != 'RGB':
                    img = img.convert('RGB')
                processed_image = img.copy()
            
            media_groups[media_group_id]["images"].append(processed_image)

            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø–µ
            if len(message.media_group) == len(media_groups[media_group_id]["images"]):
                await message.reply(
                    "‚úÖ –ì—Ä—É–ø–ø–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—É—á–µ–Ω–∞!\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ.",
                    parse_mode="Markdown"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø–µ: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –≥—Ä—É–ø–ø–µ")
        finally:
            # –û–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if os.path.exists(temp_dir):
                shutil.rmtree(temp_dir)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_media_group: {e}")
        await message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—å—à–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
        )

@router.message(F.document)
async def handle_document(message: Message):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        user_id = str(message.from_user.id)
        
        can_request, error_message = await api_tracker.can_make_request(user_id)
        if not can_request:
            await send_formatted_message(message, error_message, "warning")
            return

        temp_dir = tempfile.mkdtemp()
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_info = await bot.get_file(message.document.file_id)
            file_path = os.path.join(temp_dir, message.document.file_name)
            await bot.download_file(file_info.file_path, file_path)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            result = await process_file(message, file_path, message.document.mime_type)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await send_formatted_message(message, result)
            
        finally:
            if os.path.exists(temp_dir):
                shutil.rmtree(temp_dir)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await send_formatted_message(message, str(e), "error")

@router.message(F.text & ~F.text.startswith('/'))  # –û–±—Ä–∞–±–∞—Ç–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å '/'
async def message_handler(message: Message) -> None:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        can_request, error_message = await api_tracker.can_make_request(user_id)
        if not can_request:
            await message.answer(
                text=error_message,
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        if user_id not in chat_sessions:
            chat_sessions[user_id] = ChatSession(api_tracker.current_model, user_id)
        session = chat_sessions[user_id]

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ChatActionSender –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        async with ChatActionSender.typing(bot=message.bot, chat_id=message.chat.id):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
                response = await session.send_message(message.text)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if response.startswith("‚ö†Ô∏è"):
                    await message.answer(
                        text=escape_markdown_v2(response),
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                save_message(user_id, "user", message.text)
                save_message(user_id, "assistant", response)
                
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                api_tracker.track_request(user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                await send_long_message(message, response)
                
            except Exception as model_error:
                logger.error(f"Model error: {model_error}")
                error_text = escape_markdown_v2(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
                )
                await message.answer(
                    text=error_text,
                    parse_mode=ParseMode.MARKDOWN_V2
                )

    except Exception as e:
        logger.error(f"Error in message_handler: {e}")
        error_text = escape_markdown_v2(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /new"
        )
        await message.answer(
            text=error_text,
            parse_mode=ParseMode.MARKDOWN_V2
        )

@router.message(F.text, flags={"long_operation": "typing"})
async def message_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = str(message.from_user.id)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if user_id not in chat_sessions:
            chat_sessions[user_id] = ChatSession(api_tracker.current_model, user_id)
        
        session = chat_sessions[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if message.text.lower() == "–ø–æ–∫–∞–∂–∏ –∏—Å—Ç–æ—Ä–∏—é":
            summary = session.get_context_summary()
            await message.reply(f"üìù –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n\n{summary}")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
        response = await session.send_message(message.text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await send_long_message(message, response)
        
    except Exception as e:
        logger.error(f"—à–∏–±–∫–∞ –≤ message_handler: {e}")
        await message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /clear"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ main()
@router.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        user_id = str(callback.from_user.id)
        is_admin = user_id in ADMIN_IDS

        if callback.data == "model_page_2":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
            keyboard = InlineKeyboardBuilder()
            
            for model_id, info in MODELS_INFO["page2"].items():
                keyboard.add(InlineKeyboardButton(
                    text=f"{info['emoji']} {info['name']}",
                    callback_data=f"model_{model_id}"
                ))
            
            keyboard.add(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –º–æ–¥–µ–ª—è–º",
                callback_data="model_page_1"
            ))
            
            keyboard.adjust(2)
            
            model_text = "üß™ *–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏:*\n\n"
            
            for info in MODELS_INFO["page2"].values():
                model_text += (
                    f"{info['emoji']} *{info['name']}*\n"
                    f"‚îî {info['desc']}\n"
                    f"‚îî –°–∫–æ—Ä–æ—Å—Ç—å: {info['speed']}\n"
                    f"‚îî –í–æ–∑–º–æ–∂–Ω–æ—Ç–∏: {info.get('features', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ')}\n\n"
                )

            await callback.message.edit_text(
                model_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )

        elif callback.data == "model_page_1":
            keyboard = InlineKeyboardBuilder()
            
            for model_id, info in MODELS_INFO["page1"].items():
                keyboard.add(InlineKeyboardButton(
                    text=f"{info['emoji']} {info['name']}",
                    callback_data=f"model_{model_id}"
                ))
            
            keyboard.add(InlineKeyboardButton(
                text="‚û°Ô∏è –≠–∫—Å–ø–µ—Ä–∏–º–µ—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏",
                callback_data="model_page_2"
            ))
            
            keyboard.adjust(2)
            
            model_text = (
                "ü§ñ *–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:*\n\n"
                "*–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏:*\n\n"
            )
            
            for info in MODELS_INFO["page1"].values():
                model_text += (
                    f"{info['emoji']} *{info['name']}*\n"
                    f"‚îî {info['desc']}\n"
                    f"‚îî –°–∫–æ—Ä–æ—Å—Ç—å: {info['speed']}\n\n"
                )

            await callback.message.edit_text(
                model_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )

        elif callback.data.startswith("model_"):
            model_name = callback.data.replace("model_", "")
            
            # –ü–æ–≤–µ—Ä—è–º –¥–æ—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
            if not is_admin and MODEL_LIMITS[model_name]["free"]["rpm"] == 0:
                await callback.answer(
                    "–≠—Ç–∞ –º–æ–¥–µ—å –¥—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", 
                    show_alert=True
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–≤—É—é —Å–µ—Å—Å–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
            chat_sessions[user_id] = ChatSession(model_name, user_id)
            api_tracker.current_model = model_name
            
            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            model_info = None
            for page in MODELS_INFO.values():
                if model_name in page:
                    model_info = page[model_name]
                    break
            
            if model_info:
                await callback.message.edit_text(
                    f"{model_info['emoji']} –ú–æ–¥–µ–ª –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ *{model_info['name']}*\n"
                    "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥!",
                    parse_mode="Markdown"
                )
                await callback.answer(
                    f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {model_info['name']}!"
                )
            else:
                await callback.answer(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏", 
                    show_alert=True
                )

        elif callback.data.startswith("mode_"):
            mode = callback.data.split("_")[1]
            
            # –û–±–Ω–æ–≤–ª–µ–º —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in user_modes:
                user_modes[user_id] = {}
            user_modes[user_id]["mode"] = mode
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            if user_id in chat_sessions:
                session = chat_sessions[user_id]
                session.update_conversation_style(mode)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if mode == "casual":
                await callback.message.edit_text(
                    "üòä –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–±—â–∞–µ–º—Å—è –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏. –ö–∞–∫ –¥–µ–ª–∞?",
                    parse_mode="Markdown"
                )
            else:
                await callback.message.edit_text(
                    "üëî –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                    parse_mode="Markdown"
                )
            
            await callback.answer("–†–µ–∂–∏ –æ–±—â–µ–Ω–∏—è –∏–∑–º–Ω–µ–Ω!")
            
        elif callback.data == "new_chat":
            chat_sessions[user_id] = ChatSession(api_tracker.current_model)
            await callback.answer("–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥!")
            await callback.message.edit_text("üîÑ –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥!")
            
        elif callback.data == "show_history":
            await cmd_history(callback.message)
            await callback.answer()
            
        elif callback.data == "export_history":
            await cmd_export(callback.message)
            await callback.answer()
            
        elif callback.data == "help":
            await help_handler(callback.message)
            await callback.answer()
            
        elif callback.data == "clear_history":
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute('DELETE FROM messages WHERE user_id = ?', (callback.from_user.id,))
            conn.commit()
            conn.close()
            
            await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
            await callback.message.edit_text("üóë –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!")
        
        elif callback.data == "refresh_stats":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await stats_handler(callback.message)
            await callback.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            
        elif callback.data == "detailed_stats":
            user_id = str(callback.from_user.id)
            stats = api_tracker.get_usage_stats(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute('''
                SELECT DATE(timestamp), COUNT(*) 
                FROM messages 
                WHERE user_id = ? 
                GROUP BY DATE(timestamp)
                ORDER BY DATE(timestamp) DESC
                LIMIT 7
            ''', (callback.from_user.id,))
            daily_stats = c.fetchall()
            conn.close()
            
            detailed_text = "* –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            
            # –î–æ–∞–≤–ª–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
            detailed_text += "*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º:*\n"
            for date, count in daily_stats:
                detailed_text += f" {date}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            
            await callback.message.reply(
                detailed_text,
                parse_mode="Markdown"
            )
            await callback.answer()
        
        elif callback.data == "refresh_history":
            await cmd_history(callback.message)
            await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        
        elif callback.data == "toggle_safety":
            user_id = str(callback.from_user.id)
            
            if user_id not in ADMIN_IDS:
                await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
                return
            
            if user_id in DISABLED_SAFETY_USERS:
                DISABLED_SAFETY_USERS.remove(user_id)
                is_disabled = False
                message = "üîì –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å–∏ –≤–∫—é—á–µ–Ω—ã"
            else:
                DISABLED_SAFETY_USERS.add(user_id)
                is_disabled = True
                message = "üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã"
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–µ–º —Å–µ—Å—Å—é —Å –Ω–æ–≤—ã–º–∏ –Ω—Å—Ç—Ä–æ–π–∫–∞–º–∏
            if user_id in chat_sessions:
                chat_sessions[user_id] = ChatSession(api_tracker.current_model)
            
            # –û–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            status_text = (
                "üõ° *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏*\n\n"
                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'üîì –û—Ç–∫–ª—é—á–µ–Ω—ã' if is_disabled else 'üîí –í–∫–ª—é—á–µ–Ω—ã'}\n\n"
                "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–Ω–∏–π –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≥–µ–Ω–µ—Ä–∞–∏–∏ "
                "–Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é!"
            )
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(
                text="üîì –û—Ç–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è" if not is_disabled else "üîí –í–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
                callback_data="toggle_safety"
            ))
            
            await callback.message.edit_text(
                status_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
            
            await callback.answer(message, show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_handler: {e}")
        await callback.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–æ—Ç–∫–µ –∑–ø—Ä–æ—Å–∞!", 
            show_alert=True
        )

@router.message(Command("export"), flags={"command": True})
async def cmd_export(message: types.Message):
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export")
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export"""
    try:
        user_id = message.from_user.id
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        
        c.execute('''
            SELECT role, content, timestamp 
            FROM messages 
            WHERE user_id = ? 
            ORDER BY timestamp ASC
        ''', (user_id,))
        
        messages = c.fetchall()
        conn.close()

        if not messages:
            await message.reply("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞")
            return

        export_data = {
            "user_id": user_id,
            "username": message.from_user.username,
            "export_date": datetime.now().isoformat(),
            "messages": [
                {
                    "role": msg[0],
                    "content": msg[1],
                    "timestamp": msg[2]
                }
                for msg in messages
            ]
        }

        filename = f"chat_history_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
            
            await message.reply_document(
                FSInputFile(filename),
                caption="üì§ –≠—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"
            )
        finally:
            if os.path.exists(filename):
                os.remove(filename)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_export: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∏—Å—Ç–æ—Ä–∏–∏")

@router.message(Command("history"), flags={"command": True})
async def history_handler(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    try:
        user_id = str(message.from_user.id)
        if user_id not in chat_sessions:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞")
            return
            
        session = chat_sessions[user_id]
        summary = session.get_context_summary()
        
        await message.reply(
            f"üìù *–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:*\n\n{summary}",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ history_handler: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏")

@router.message(Command("mode"), flags={"command": True})
async def mode_handler(message: types.Message):
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mode")
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mode"""
    user_id = str(message.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∏–º–∞
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="üëî –§–æ—Ä–º–∞–ª—å–Ω—ã–π",
        callback_data="mode_formal"
    ))
    keyboard.add(InlineKeyboardButton(
        text="üëã –î—Ä—É–∂–µ—Å–∏",
        callback_data="mode_casual"
    ))
    
    current_mode = user_modes.get(user_id, {}).get("mode", "formal")
    mode_text = "—Ñ–æ—Ä–º–∞–ª–Ω–æ–º" if current_mode == "formal" else "–¥—Ä—É–µ—Å–∫–æ–º"
    
    await message.reply(
        f"üîÑ *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è*\n\n"
        f"–°–µ–π—á–∞—Å —è –æ–±–∞—é—Å—å  *{mode_text}* —Ä–µ–∂–∏–º–µ.\n\n"
        " *–§–æ—Ä–º–∞–ª—å–Ω—ã–π* - –¥–µ–ª–æ–≤–æ —Å—Ç–ª—å, —á–µ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã\n"
        "üëã *–î—Ä—É–∂–µ—Å–∫–∏–π* - –Ω–µ—Ñ–æ–º–∞–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ, —ç–º–æ–¥–∑–∏, —à—É—Ç–∫–∏",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )

@router.message(Command("summary"), flags={"command": True})
async def summary_handler(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ç–µ–∫—É—â–µ–π –±–µ—Å–µ–¥—ã"""
    try:
        user_id = str(message.from_user.id)
        if user_id not in chat_sessions:
            await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Å—Å–∏–∏ —á–∞—Ç–∞.")
            return

        session = chat_sessions[user_id]
        summary = session.get_conversation_summary()

        summary_text = (
            "üìä *–°–≤–æ–¥–∫–∞ –±–µ—Å–µ–¥—ã:*\n\n"
            f" –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {summary['total_messages']}\n"
            f"üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã: {', '.join(summary['main_topics']) if summary['main_topics'] else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}\n"
            f"üòä –¢–æ–Ω –±–µ—Å–µ—ã: {summary['sentiment']}\n"
            f"üåê –Ø–∑—ã–∫: {SUPPORTED_LANGUAGES.get(summary['language'], '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n\n"
            "*–ü—Ä–µ–¥–ø–æ—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n"
        )

        for key, value in summary['user_preferences'].items():
            summary_text += f"‚Ä¢ {key}: {value}\n"

        await message.reply(summary_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in summary_handler: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏.")

@router.message(Command("clear"))
async def clear_handler(message: types.Message):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    try:
        user_id = str(message.from_user.id)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞
        chat_sessions[user_id] = ChatSession(api_tracker.current_model)
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('DELETE FROM messages WHERE user_id = ?', (message.from_user.id,))
        conn.commit()
        conn.close()
        
        await message.reply(
            "üóë *–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞*\n"
            "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥!",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ clear_handler: {e}")
        await message.reply(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏*",
            parse_mode="Markdown"
        )

@router.message(Command("context"), flags={"command": True})
async def context_handler(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    try:
        user_id = str(message.from_user.id)
        if user_id not in chat_sessions:
            await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞.")
            return

        session = chat_sessions[user_id]
        state = session.conversation_state

        context_text = (
            "üß† *–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:*\n\n"
            f"üìå –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {state['current_topic'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}\n"
            f"üìä –ì–ª—É–±–∏–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {state['conversation_depth']}\n\n"
            "*–ö–ª—é—á–µ–≤—ã –º–æ–º–µ–Ω—Ç—ã:*\n"
            f"{', '.join(state['key_points'][:5]) or '–ù—Ç'}\n\n"
            "*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã:*\n"
            f"{', '.join(state['questions_asked'][-3:]) or '–ù–µ—Ç'}\n\n"
            "*–ü—Ä–µ–¥–ª–∞–≥–∞–º—ã–µ —Ç–µ–º—ã:*\n"
            f"{', '.join(state['follow_up_suggestions']) or '–ù–µ—Ç'}"
        )

        await message.reply(context_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in context_handler: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")

@router.message(Command("safety"), flags={"command": True})
async def safety_handler(message: types.Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ safety settings –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    try:
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if user_id not in ADMIN_IDS:
            await message.reply(
                "‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω*\n"
                "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                parse_mode="Markdown"
            )
            return

        # –°–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardBuilder()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å safety settings
        is_disabled = user_id in DISABLED_SAFETY_USERS
        
        keyboard.add(InlineKeyboardButton(
            text=" –û—Ç–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è" if not is_disabled else "üîí –í–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
            callback_data="toggle_safety"
        ))

        status_text = (
            "üõ° *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏*\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'üîì –û—Ç–∫–ª—é—á–µ–Ω—ã' if is_disabled else 'üîí –í–∫—é—á–µ–Ω—ã'}\n\n"
            "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏:* –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≥–µ–Ω–µ—Ä–∞–∏–∏ "
            "–Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–Ω—Ç–µ–Ω—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é!"
        )

        await message.reply(
            status_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"Error in safety_handler: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–µ–∑–æ–∞—Å–Ω–æ—Å—Ç–∏.")

async def setup():
    """–ê—Å–Ω—Ö—Ä–Ω–Ω–∞—è –Ω—Å—Ç—Ä–æ–π–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω—ã—Ö
        init_db()
        logger.info("–ë–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–º –æ–º–∞–Ω–¥ –±–æ—Ç–∞
        commands = setup_bot_commands()
        await bot.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ—Ç–∞: {e}")
        raise

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        bot = Bot(
            token=TELEGRAM_TOKEN,
            default=DefaultBotProperties(
                parse_mode=ParseMode.MARKDOWN_V2
            )
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        dp = Dispatcher(storage=MemoryStorage())
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
        setup_middlewares(dp)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä
        dp.include_router(router)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await bot.set_my_commands(setup_bot_commands())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        try:
            logger.info("Bot started")
            await dp.start_polling(
                bot,
                allowed_updates=dp.resolve_used_update_types(),
                close_bot_session=True
            )
        except Exception as e:
            logger.error(f"Polling error: {e}")
        finally:
            if bot.session:
                await bot.session.close()
            
    except Exception as e:
        logger.error(f"Startup error: {e}")
        raise

# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
temp_image_storage = {}  # user_id: {"images": [], "media_group_id": str, "waiting_prompt": bool}

@router.message(Command("analyze"))
async def analyze_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if user_id not in user_media or not user_media[user_id]["images"]:
            await message.reply(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
                "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
            )
            return
            
        images = user_media[user_id]["images"]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_msg = await message.reply("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            model = genai.GenerativeModel('gemini-pro-vision')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            prompt = """–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –∏–∑–æ—Ä–∞–∂–µ–Ω–∏—è:
            1. –û–ø–∏—à–∏ —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞–∂–¥–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            2. –£–∫–∞–∂–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
            3. –ï—Å–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π - —É–∫–∞–∂–∏ –∫–∞–∫ –∏–º–µ–Ω–Ω–æ
            4. –°–¥–µ–ª–∞–π –æ–±—â–∏–π –≤—ã–≤–æ–¥
            """
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            parts = [{"text": prompt}]
            for img in images:
                if img.mode != 'RGB':
                    img = img.convert('RGB')
                parts.append({"image": img})
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            response = model.generate_content(parts)
            
            if not response or not hasattr(response, 'text'):
                raise ValueError("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
            
            # –û—Ç–ø—Ä–∞–≤—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            await processing_msg.delete()
            await send_long_message(message, response.text)
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            del user_media[user_id]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±–∞–∂–µ–Ω–∏–π: {e}")
            await processing_msg.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ analyze_handler: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏–∑–∞."
        )

@router.message(Command("done"), flags={"command": True})
async def done_handler(message: Message):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–º–ø—Ç"""
    try:
        user_id = str(message.from_user.id)
        if user_id not in temp_image_storage or not temp_image_storage[user_id]["images"]:
            await message.reply(
                "‚ùå *–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞*\n\n"
                "–°–Ω–∞–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /analyze",
                parse_mode="Markdown"
            )
            return
            
        temp_image_storage[user_id]["waiting_prompt"] = True
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        summary = "*üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:*\n\n"
        for i, desc in enumerate(temp_image_storage[user_id]["descriptions"], 1):
            summary += f"*–ò–∑–æ–±—Ä–∞–∂–µ–Ω–µ {i}:*\n{desc}\n\n"
            
        await message.reply(
            f"{summary}\n"
            "üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–± —ç–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "- –°—Ä–∞–≤–Ω–∏ —ç—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–Ω–∏—è\n"
            "- –ù–∞–π–¥–∏ –æ–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã\n"
            "- –ö–∞–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –Ω–∏–º?\n"
            "- –ß—Ç–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —ç—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ done_handler: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–µ –∫–æ–º–∞–Ω–¥—ã")

@router.message(F.text & ~F.text.startswith('/'))
async def message_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if user_id in temp_image_storage and temp_image_storage[user_id]["waiting_prompt"]:
            images = temp_image_storage[user_id]["images"]
            prompt = message.text
            
            if user_id not in chat_sessions:
                chat_sessions[user_id] = ChatSession("gemini-pro-vision", user_id)
            session = chat_sessions[user_id]
            
            try:
                response = await session.process_images(images, prompt)
                
                save_message(user_id, "user", f"[–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π] {prompt}")
                save_message(user_id, "assistant", response)
                
                api_tracker.track_request(user_id)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ—â–µ–Ω–∏–π
                await send_long_message(message, response)
                
            except Exception as e:
                logger.error(f"—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
                await message.reply(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
                )
            finally:
                del temp_image_storage[user_id]
            
        else:
            await process_text_message(message)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ message_handler: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

# –ü–æ—Å–ª–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ –ø–µ—Ä–µ–¥ –∫–ª–∞—Å—Å–∞–º–∏ –¥–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏–∏

async def handle_single_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        user_id = str(message.from_user.id)
        
        can_request, error_message = await api_tracker.can_make_request(user_id)
        if not can_request:
            await message.reply(error_message)
            return

        photo = message.photo[-1]
        temp_dir = tempfile.mkdtemp()
        
        try:
            file_info = await bot.get_file(photo.file_id)
            file_path = os.path.join(temp_dir, f"image_{photo.file_id}.jpg")
            await bot.download_file(file_info.file_path, file_path)
            
            with Image.open(file_path) as img:
                if img.mode != 'RGB':
                    img = img.convert('RGB')
                processed_image = img.copy()

            if user_id not in chat_sessions:
                chat_sessions[user_id] = ChatSession("gemini-pro-vision", user_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            session = chat_sessions[user_id]

            response_text = await session.process_images(
                [processed_image],
                message.caption
            )

            save_message(user_id, "user", f"[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ] {message.caption}")
            save_message(user_id, "assistant", response_text)
            
            api_tracker.track_request(user_id)
            
            await send_long_message(message, response_text)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        finally:
            if os.path.exists(temp_dir):
                shutil.rmtree(temp_dir)
                
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_single_photo: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")

async def process_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        if not message.text:
            return

        user_id = str(message.from_user.id)
        
        can_request, error_message = await api_tracker.can_make_request(user_id)
        if not can_request:
            await message.reply(error_message)
            return
            
        if user_id not in chat_sessions:
            chat_sessions[user_id] = ChatSession(api_tracker.current_model)
            
        session = chat_sessions[user_id]
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–µ–ª–∏
        try:
            response = await session.send_message(message.text)
        except Exception as model_error:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏: {model_error}")
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏")
            return
            
        if not response:
            await message.reply("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        save_message(user_id, "user", message.text)
        save_message(user_id, "assistant", response)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏
        api_tracker.track_request(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await send_long_message(message, response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_text_message: {e}")
        await message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
        )

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Å—Ç–∞–Ω—Ç—ã –ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
MAX_MESSAGE_LENGTH = 3000  # –ï—â–µ —É–º–µ–Ω—å—à–∏–º –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
MIN_CHUNK_SIZE = 300  # –º–µ–Ω—å—à–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏
MAX_PARTS = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π

async def split_text_safely(text: str) -> List[str]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏"""
    if not text:
        return []
        
    if len(text) <= MAX_MESSAGE_LENGTH:
        return [text]

    # –£–¥–∞–ª–µ–º –ª–∏—à–Ω–∏ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω—Å—ã —Å—Ç—Ä–æ–∫
    text = '\n'.join(line.strip() for line in text.split('\n'))
    
    parts = []
    while text and len(parts) < MAX_PARTS:
        if len(text) <= MAX_MESSAGE_LENGTH:
            parts.append(text)
            break
            
        # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        split_index = MAX_MESSAGE_LENGTH
        
        # –ü—Ä–æ—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–Ω–∏—è
        dot_index = text[:split_index].rfind('. ')
        if dot_index > MIN_CHUNK_SIZE:
            split_index = dot_index + 1
        else:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–Ω–µ—Ü –∞–±–∑–∞—Ü
            nl_index = text[:split_index].rfind('\n')
            if nl_index > MIN_CHUNK_SIZE:
                split_index = nl_index
            else:
                # –ü–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–µ–ª
                space_index = text[:split_index].rfind(' ')
                if space_index > MIN_CHUNK_SIZE:
                    split_index = space_index
        
        # –î–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å –∏ –æ–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç
        parts.append(text[:split_index].strip())
        text = text[split_index:].strip()
        
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏
    if text and len(parts) >= MAX_PARTS:
        parts.append("...(—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å)...")
        
    return parts

def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown V2
    """
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    return ''.join(f'\\{c}' if c in escape_chars else c for c in text)

async def send_long_message(message: Message, text: str, **kwargs) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏
    """
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
        if len(text) <= MAX_MESSAGE_LENGTH:
            # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            parts = []
            current = ""
            is_bold = False
            
            # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ
            i = 0
            while i < len(text):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ ** –∏–ª–∏ *
                if text[i:i+2] == '**' or text[i] == '*':
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    if current:
                        parts.append(Bold(current) if is_bold else current)
                        current = ""
                    is_bold = not is_bold
                    i += 2 if text[i:i+2] == '**' else 1
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                current += text[i]
                i += 1
                
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
            if current:
                parts.append(Bold(current) if is_bold else current)
                
            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            content = Text(*parts)
            
            try:
                await message.answer(**content.as_kwargs())
            except TelegramBadRequest as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                await message.answer(text=text, parse_mode=None)
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
        parts = text.split("\n\n")
        for part in parts:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
            formatted_parts = []
            current = ""
            is_bold = False
            
            i = 0
            while i < len(part):
                if part[i:i+2] == '**' or part[i] == '*':
                    if current:
                        formatted_parts.append(Bold(current) if is_bold else current)
                        current = ""
                    is_bold = not is_bold
                    i += 2 if part[i:i+2] == '**' else 1
                    continue
                
                current += part[i]
                i += 1
                
            if current:
                formatted_parts.append(Bold(current) if is_bold else current)
                
            content = Text(*formatted_parts)
            
            try:
                await message.answer(**content.as_kwargs())
                await asyncio.sleep(0.5)
            except TelegramBadRequest as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Å—Ç–∏: {e}")
                await message.answer(text=part, parse_mode=None)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(text=text, parse_mode=None)

# –î–æ–±–∞–≤–∏–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—è
MARKDOWN_CHARS = ['*', '_', '`', '[', ']', '.', '(', ')', '#', '+', '-', '=', '|', '{', '}', '>', '<', '~']
MAX_HISTORY_LENGTH = 20

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown V2"""
    for char in MARKDOWN_CHARS:
        text = text.replace(char, f"\\{char}")
    return text

def format_text_safely(text: str) -> str:
    """–ë–µ–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Markdown V2"""
    if not text:
        return ""
    
    lines = text.split('\n')
    formatted_lines = []
    in_code_block = False
    
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    for line in lines:
        line = line.strip()
        if not line:
            formatted_lines.append(line)
            continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
        if line.startswith('```'):
            in_code_block = not in_code_block
            formatted_lines.append(line)
            continue
            
        if in_code_block:
            formatted_lines.append(line)
            continue

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        escaped_line = ""
        is_formatting = False
        i = 0
        while i < len(line):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            if line[i:i+2] == '**':
                escaped_line += '**'
                is_formatting = not is_formatting
                i += 2
                continue
                
            if line[i] == '*':
                escaped_line += '*'
                is_formatting = not is_formatting
                i += 1
                continue
                
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Ç–æ–ª—å–∫–æ –≤–Ω–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if not is_formatting and line[i] in escape_chars:
                escaped_line += f'\\{line[i]}'
            else:
                escaped_line += line[i]
            i += 1
            
        line = escaped_line

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏
        if line.startswith('‚Ä¢'):
            line = f"‚Ä¢ {line[2:]}"
        elif line.startswith('1Ô∏è‚É£'):
            line = f"1Ô∏è‚É£ {line[2:]}"
        elif line.startswith('‚îÇ'):
            line = f"‚îÇ {line[2:]}"
            
        formatted_lines.append(line)
    
    return '\n'.join(formatted_lines)

# –î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGE_FORMATTING = {
    "code_block": "```",
    "inline_code": "`",
    "bold": "*",
    "italic": "_",
    "quote": ">",
}

# –î–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGE_TEMPLATES = {
    "error": "‚ùå *–û—à–∏–±–∫–∞*\n{0}",
    "success": "‚úÖ *–£—Å–ø–µ—à–Ω–æ*\n{0}",
    "info": "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n{0}",
    "warning": "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ*\n{0}",
    "file_processing": "{0}"  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç.–∫. –æ–Ω–æ —É–∂–µ –µ—Å—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∞–Ω–∞–ª–∏–∑–∞
}

def format_message(text: str, msg_type: str = "info", **kwargs) -> Text:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        msg_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (info, success, warning, error, code, quote)
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    try:
        parts = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        prefix = {
            "info": "‚ÑπÔ∏è ",
            "success": "‚úÖ ",
            "warning": "‚ö†Ô∏è ",
            "error": "‚ùå ",
        }.get(msg_type, "")
        
        if prefix:
            parts.append(prefix)
            
        # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        current_text = ""
        is_bold = False
        is_code = False
        i = 0
        
        while i < len(text):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if text[i:i+2] == '**':
                if current_text:
                    parts.append(Bold(current_text) if is_bold else current_text)
                    current_text = ""
                is_bold = not is_bold
                i += 2
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∫–æ–¥–∞
            elif text[i] == '`':
                if current_text:
                    parts.append(Code(current_text) if is_code else current_text)
                    current_text = ""
                is_code = not is_code
                i += 1
                continue
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏
            elif text[i] == '\\':
                if i + 1 < len(text):
                    current_text += text[i+1]  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–º–≤–æ–ª –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    i += 2
                    continue
                    
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            current_text += text[i]
            i += 1
            
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
        if current_text:
            if is_bold:
                parts.append(Bold(current_text))
            elif is_code:
                parts.append(Code(current_text))
            else:
                parts.append(current_text)
                
        return Text(*parts)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return Text(text)

async def send_formatted_message(message: Message, text: str, msg_type: str = "info"):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        content = format_message(text, msg_type)
        await message.answer(**content.as_kwargs())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await message.answer(text=text, parse_mode=None)

async def process_file(message: Message, file_path: str, mime_type: str) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    try:
        user_prompt = message.caption
        text_content = await extract_text_from_file(file_path, mime_type)
        
        if not text_content:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞"

        user_id = str(message.from_user.id)
        if user_id not in chat_sessions:
            chat_sessions[user_id] = ChatSession(api_tracker.current_model)
        session = chat_sessions[user_id]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if user_prompt:
            prompt = user_prompt + "\n\n" + text_content
        else:
            prompt = (
                "—Ä–æ—á–∏—Ç–∞–π –∏ –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞. "
                "–ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.\n\n"
                "{}"
            ).format(text_content)

        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç –º–æ–¥–µ–ª–∏
        response = await session.send_message(prompt)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        result = (
            "üìÑ *{}*\n\n"
            "{}"
        ).format(
            message.document.file_name,
            response
        )
        
        return result
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {}".format(e))
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞"

@router.message(Command("toggle_prompt"), flags={"command": True})
async def toggle_prompt_handler(message: types.Message):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    try:
        user_id = str(message.from_user.id)
        if user_id not in chat_sessions:
            chat_sessions[user_id] = ChatSession(api_tracker.current_model)
        
        session = chat_sessions[user_id]
        is_enabled = session.toggle_system_prompt()
        
        await message.reply(
            "üîÑ *–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:* {}\n\n{}".format(
                "–≤–∫–ª—é—á–µ–Ω" if is_enabled else "–≤—ã–∫–ª—é—á–µ–Ω",
                "–ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏" if is_enabled else "–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"
            ),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ toggle_prompt_handler: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–º–ø—Ç–∞")

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏

@router.callback_query(lambda c: c.data.startswith("model_page_"))
async def handle_model_pages(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    try:
        page = int(callback.data.split("_")[-1])
        keyboard = InlineKeyboardBuilder()
        
        if page == 1:
            models_info = MODELS_INFO["page1"]
            next_page_text = "‚û°Ô∏è –≠–∫—Å–ø–µ—Ä–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏"
            next_page = 2
            title = "*–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏:*\n\n"
        else:
            models_info = MODELS_INFO["page2"]
            next_page_text = "‚¨ÖÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏"
            next_page = 1
            title = "*–≠–∫–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏:*\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ–ª–µ–π
        for model_id, info in models_info.items():
            keyboard.add(InlineKeyboardButton(
                text=f"{info['emoji']} {info['name']}", 
                callback_data=f"model_{model_id}"
            ))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        keyboard.add(InlineKeyboardButton(
            text=next_page_text,
            callback_data=f"model_page_{next_page}"
        ))

        # –æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
        keyboard.add(InlineKeyboardButton(
            text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
            callback_data="close_model_menu"
        ))

        keyboard.adjust(2)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        model_text = f"ü§ñ *–í—ã–±–µ—Ä–∏—Ç–µ –º–¥–µ–ª—å:*\n\n{title}"
        
        for info in models_info.values():
            features = info.get('features', '')
            model_text += (
                f"{info['emoji']} *{info['name']}*\n"
                f"‚îî {info['desc']}\n"
                f"‚îî –°–∫–æ—Ä–æ—Å—Ç—å: {info['speed']}\n"
                f"{f'‚îî {features}' if features else ''}\n\n"
            )

        await callback.message.edit_text(
            model_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∞ –≤ handle_model_pages: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("model_"))
async def handle_model_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    try:
        if callback.data == "close_model_menu":
            await callback.message.delete()
            await callback.answer()
            return

        model_id = callback.data.replace("model_", "")
        if model_id.startswith("page"):
            return
            
        user_id = str(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –º–æ–¥–µ–ª—è–º
        if model_id in MODELS_INFO["page2"] and not is_admin(user_id):
            await callback.answer(
                "–≠—Ç–∞ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", 
                show_alert=True
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        limits = MODEL_LIMITS[model_id]
        user_type = "paid" if is_admin(user_id) else "free"
        
        if limits[user_type]["rpm"] == 0:
            await callback.answer(
                "–≠—Ç–∞ –º–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥—Å—Ç—É–ø–Ω–∞",
                show_alert=True
            )
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
        chat_sessions[user_id] = ChatSession(model_id, user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        model_info = (MODELS_INFO["page1"].get(model_id) or 
                     MODELS_INFO["page2"].get(model_id))
        
        success_text = (
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_info['emoji']} *{model_info['name']}*\n"
            f"‚îî {model_info['desc']}\n"
            f"‚îî –°–∫–æ—Ä–æ—Å—Ç—å: {model_info['speed']}"
        )
        
        if model_info.get('features'):
            success_text += f"\n‚îî {model_info['features']}"

        await callback.message.edit_text(
            success_text,
            parse_mode="Markdown"
        )
        await callback.answer("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞")

    except Exception as e:
        logger.error(f"—à–∏–±–∫–∞ –≤ handle_model_selection: {e}")
        await callback.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏", 
            show_alert=True
        )

@router.callback_query(lambda c: c.data == "close_model_menu")
async def close_model_menu(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    try:
        await callback.message.delete()
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ close_model_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é", show_alert=True)

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ –≤ –Ω–∞—á–∞–ª —Ñ–∞–π–∞ –ø–æ—Å–ª–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
def is_admin(user_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞
CHAT_SETTINGS = {
    "max_history_length": 1000,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    "context_window": 50,        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–∫–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    "memory_threshold": 0.7,     # –ü–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    "max_memory_items": 20       # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "–≤—Å–ø–æ–º–∏–Ω–∞–µ–º—ã—Ö" —Å–æ–æ–±—â–µ–Ω–∏–π
}

class ChatMemory:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é —á–∞—Ç–∞"""
    def __init__(self):
        self.messages = []  # –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.topics = {}    # –¢–æ–ø–∏–∫–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.keywords = {}  # –ö–ª—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
    def add_message(self, message: dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è  –ø–∞–º—è—Ç—å"""
        self.messages.append(message)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        text = message['content'].lower()
        words = set(word for word in text.split() 
                   if len(word) > 3 and not word.isdigit())
        
        # –û–±–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–≤
        for word in words:
            if word not in self.keywords:
                self.keywords[word] = []
            self.keywords[word].append(len(self.messages) - 1)
            
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–æ—Ä–∏–∏
        if len(self.messages) > CHAT_SETTINGS["max_history_length"]:
            self.messages = self.messages[-CHAT_SETTINGS["max_history_length"]:]
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
            self._rebuild_indices()
    
    def find_relevant_messages(self, query: str, threshold: float = None) -> List[dict]:
        """–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if threshold is None:
            threshold = CHAT_SETTINGS["memory_threshold"]
            
        query_words = set(query.lower().split())
        relevant_indices = set()
        
        # –ò—â–µ –ø–æ –ª—é—á–≤—ã–º —Å–ª–æ–≤–∞–º
        for word in query_words:
            if word in self.keywords:
                relevant_indices.update(self.keywords[word])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        relevant_messages = []
        for idx in relevant_indices:
            message = self.messages[idx]
            relevance = self._calculate_relevance(message['content'], query)
            if relevance >= threshold:
                relevant_messages.append({
                    **message,
                    'relevance': relevance
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        relevant_messages.sort(key=lambda x: x['relevance'], reverse=True)
        return relevant_messages[:CHAT_SETTINGS["max_memory_items"]]
    
    def _calculate_relevance(self, text1: str, text2: str) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—Å—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–µ—Å—Ç–∞–º–∏"""
        words1 = set(text1.lower().split())
        words2 = set(text2.lower().split())
        
        intersection = words1.intersection(words2)
        union = words1.union(words2)
        
        return len(intersection) / len(union) if union else 0
    
    def _rebuild_indices(self):
        """–ü–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ—Å–ª–µ –æ–±–µ–∑–∫–∏ –∏—Å—Ç–æ–∏–∏"""
        self.keywords = {}
        for i, message in enumerate(self.messages):
            text = message['content'].lower()
            words = set(word for word in text.split() 
                       if len(word) > 3 and not word.isdigit())
            
            for word in words:
                if word not in self.keywords:
                    self.keywords[word] = []
                self.keywords[word].append(i)

# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω—ã—Ö –¥–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
photo_groups = {}  # user_id: {"photos": [], "timestamp": datetime, "waiting_prompt": False}

@router.message(F.text)
async def handle_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥—Ä—É–ø–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ–∂–∏–¥–∞—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∏
        media_group = None
        for group_id, group in media_groups.items():
            if group["user_id"] == user_id and group["waiting_prompt"]:
                media_group = group
                media_group_id = group_id
                break

        if media_group and media_group["images"]:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
            processing_msg = await message.reply("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            
            try:
                if user_id not in chat_sessions:
                    chat_sessions[user_id] = ChatSession("gemini-pro-vision", user_id)
                session = chat_sessions[user_id]

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_parts = []
                for img in media_group["images"]:
                    if img.mode != 'RGB':
                        img = img.convert('RGB')
                    
                    with io.BytesIO() as bio:
                        img.save(bio, format='JPEG')
                        image_bytes = bio.getvalue()
                        image_parts.append({
                            "mime_type": "image/jpeg",
                            "data": base64.b64encode(image_bytes).decode('utf-8')
                        })

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è Gemini –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∂–µ–Ω–∏–π
                request = {
                    "contents": [{
                        "parts": [
                            {"text": message.text},
                            *[{"inline_data": part} for part in image_parts]
                        ]
                    }]
                }

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
                response = await session.model.generate_content(request)

                if not response or not hasattr(response, 'text'):
                    raise ValueError("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")

                response_text = response.text.strip()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                save_message(user_id, "user", f"[–ì—Ä—É–ø–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π] {message.text}")
                save_message(user_id, "assistant", response_text)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                await processing_msg.delete()
                await send_long_message(message, response_text)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
                await processing_msg.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            finally:
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                if media_group_id in media_groups:
                    del media_groups[media_group_id]
        else:
            # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if user_id not in chat_sessions:
                chat_sessions[user_id] = ChatSession("gemini-pro", user_id)
            session = chat_sessions[user_id]
            response = await session.send_message(message.text)
            await send_long_message(message, response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–æ–±–∞–≤–∏–º:

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
TEMP_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'temp')
os.makedirs(TEMP_DIR, exist_ok=True)

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def clear_temp_dir():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    if os.path.exists(TEMP_DIR):
        for file in os.listdir(TEMP_DIR):
            file_path = os.path.join(TEMP_DIR, file)
            try:
                if os.path.isfile(file_path):
                    os.unlink(file_path)
                elif os.path.isdir(file_path):
                    shutil.rmtree(file_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

# –ü–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–æ–±–∞–≤–∏–º:
MAX_IMAGES_PER_GROUP = 5  # –ú–∞–∫—Å–∏–º–∞—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≥—Ä–ø–ø–µ
MEDIA_GROUP_TIMEOUT = 60  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –û–±–Ω–æ–≤–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
media_groups = {}  # media_group_id: {"images": [], "user_id": str, "timestamp": datetime}
user_media = {}   # user_id: {"images": [], "waiting_prompt": bool, "media_group_id": str}

@router.message(F.text & ~F.text.startswith('/'))
async def handle_text_with_images(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    try:
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if user_id in user_media and user_media[user_id]["images"] and user_media[user_id]["waiting_prompt"]:
            images = user_media[user_id]["images"]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
            processing_msg = await message.reply("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            
            try:
                # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                model = genai.GenerativeModel('gemini-pro-vision')
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
                parts = [{"text": message.text}]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                for img in images:
                    if img.mode != 'RGB':
                        img = img.convert('RGB')
                    parts.append({"image": img})
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
                response = model.generate_content(parts)
                
                if not response or not hasattr(response, 'text'):
                    raise ValueError("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                await processing_msg.delete()
                await send_long_message(message, response.text)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
                await processing_msg.edit_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            finally:
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_id in user_media:
                    del user_media[user_id]
        
        else:
            # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await process_text_message(message)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_with_images: {e}")
        await message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

# –î–æ–±–∞–≤–∏–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def cleanup_old_media():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        current_time = datetime.now()
        
        # –û—á–∏—â–∞–º —Å—Ç–∞—Ä—ã–µ –≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞
        for media_group_id in list(media_groups.keys()):
            if (current_time - media_groups[media_group_id]["timestamp"]).seconds > MEDIA_GROUP_TIMEOUT:
                del media_groups[media_group_id]
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(TEMP_DIR):
            for user_dir in os.listdir(TEMP_DIR):
                dir_path = os.path.join(TEMP_DIR, user_dir)
                if os.path.isdir(dir_path):
                    shutil.rmtree(dir_path)
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cleanup_old_media: {e}")

# –ü–æ—Å–µ –¥—Ä–≥–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–æ–±–∞–≤–∏–º:
ALLOWED_USER_IDS = {1180375518}  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.message(Command("add_user"), flags={"command": True})
async def add_user_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if user_id not in ADMIN_IDS:
            await message.reply(
                "‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω*\n"
                "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º",
                parse_mode="Markdown"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        parts = message.text.split()
        if len(parts) != 2:
            await message.reply(
                "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã*\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_user <user_id>",
                parse_mode="Markdown"
            )
            return

        try:
            new_user_id = int(parts[1])
        except ValueError:
            await message.reply(
                "‚ùå *–û—à–∏–±–∫–∞*\n"
                "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º",
                parse_mode="Markdown"
            )
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        ALLOWED_USER_IDS.add(new_user_id)
        
        await message.reply(
            f"‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω*\n"
            f"ID: {new_user_id}",
            parse_mode="Markdown"
        )
        
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_user_handler: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            parse_mode="Markdown"
        )

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
def is_user_allowed(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    return user_id in ALLOWED_USER_IDS or str(user_id) in ADMIN_IDS

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ middleware
def setup_middlewares(dp: Dispatcher) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è –±–æ—Ç–∞"""
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ middleware
    dp.message.middleware(ChatActionMiddleware())
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ª–æ–≥–≥–µ—Ä –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    @dp.message.middleware()
    async def logging_middleware(handler, event, data):
        logger.info(f"Handling message: {event.text}")
        return await handler(event, data)

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π
async def cmd_history(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    try:
        user_id = str(message.from_user.id)
        if user_id not in chat_sessions:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞")
            return
            
        session = chat_sessions[user_id]
        history = session.get_chat_history()
        
        if not history:
            await message.reply("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞")
            return
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç—Ä–∏—é
        history_text = "*–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:*\n\n"
        for msg in history[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            role = "üó£" if msg["role"] == "user" else "ü§ñ"
            content = msg["parts"][0]["text"][:100]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            history_text += f"{role} {content}...\n\n"
            
        await message.reply(
            history_text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
    except Exception as e:
        logger.error(f"Error in cmd_history: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏")

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–æ–±–∞–≤–∏–º:

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
TEXT_FORMATTING = {
    "code_block": "```{}\n{}\n```",
    "inline_code": "`{}`",
    "bold": "*{}*",
    "italic": "_{}_",
    "underline": "__{}__",
    "strikethrough": "~{}~"
}

# –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGE_TEMPLATES = {
    "info": "‚ÑπÔ∏è *{}*", 
    "success": "‚úÖ *{}*", 
    "warning": "‚ö†Ô∏è *{}*", 
    "error": "‚ùå *{}*", 
    "code": "```\n{}\n```",
    "quote": "> {}"
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–æ–±—â–µ–Ω–∏–π
MESSAGE_FORMATTING = {
    "code_block": "```",
    "inline_code": "`",
    "bold": "*",
    "italic": "_",
    "quote": ">",
}

# –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
SAFETY_SETTINGS = [
    {
        "category": "HARM_CATEGORY_HARASSMENT",
        "threshold": "BLOCK_NONE"  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
    },
    {
        "category": "HARM_CATEGORY_HATE_SPEECH", 
        "threshold": "BLOCK_NONE"  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
    },
    {
        "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
        "threshold": "BLOCK_NONE"  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
    },
    {
        "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
        "threshold": "BLOCK_NONE"  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
    }
]

@router.message(Command("search"))
async def search_handler(message: types.Message):
    """–ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
    try:
        query = message.text.replace("/search", "").strip()
        if not query:
            await message.reply(
                "üîç –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/search <—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞>"
            )
            return

        user_id = str(message.from_user.id)
        if user_id not in chat_sessions:
            await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞")
            return

        session = chat_sessions[user_id]
        results = await session.search_history(query)

        if not results:
            await message.reply("üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        response = ["üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*\n"]
        for result in results:
            role = "üë§" if result["role"] == "user" else "ü§ñ"
            timestamp = datetime.fromisoformat(result["timestamp"]).strftime("%d.%m.%Y %H:%M")
            relevance = int(result["relevance"] * 100)
            text = result["text"][:100] + "..." if len(result["text"]) > 100 else result["text"]
            
            response.append(
                f"{role} {timestamp} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance}%)\n"
                f"{text}\n"
            )

        await send_long_message(message, "\n".join(response))

    except Exception as e:
        logger.error(f"Error in search_handler: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")

if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

